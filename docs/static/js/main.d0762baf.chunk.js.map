{"version":3,"sources":["components/header/logo.svg","components/fork-me/index.js","components/header/index.js","components/form/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ForkMe","_ref","url","react_default","a","createElement","href","className","aria-label","width","height","viewBox","aria-hidden","d","fill","Header","src","logo","alt","defaultImg","Form","_useState","useState","_useState2","Object","slicedToArray","img","setImg","useDebounce","imgVal","id","img2weibo","onInput","e","target","value","resultUser","concat","rel","onChange","placeholder","App","components_fork_me","components_header","src_components_form","Boolean","window","location","hostname","match","rootEl","document","getElementById","childNodes","length","hydrate","src_App_0","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qOCoCzBC,eAjCA,SAAAC,GAAA,IACbC,EADaD,EACbC,IADa,OAGXC,EAAAC,EAAAC,cAAA,KACEC,KAAMJ,EACNK,UAAU,gBACVC,aAAW,yBAEXL,EAAAC,EAAAC,cAAA,OACEI,MAAM,KACNC,OAAO,KACPC,QAAQ,cACRJ,UAAU,MACVK,cAAY,QAEZT,EAAAC,EAAAC,cAAA,QACEQ,EAAE,oDACFC,KAAK,YAEPX,EAAAC,EAAAC,cAAA,QACEQ,EAAE,2LACFC,KAAK,OACLP,UAAU,aAEZJ,EAAAC,EAAAC,cAAA,QACEQ,EAAE,shBACFC,KAAK,OACLP,UAAU,kCCfLQ,SAXA,kBACbZ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAMV,UAAU,cAAcW,IAAI,SAC5Cf,EAAAC,EAAAC,cAAA,MACEE,UAAU,gBADZ,uDCGEY,SAAa,qEA0CJC,EAxCF,WAAM,IAAAC,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACLI,EADKJ,EAAA,GAAAtB,EAGA2B,sBAAYF,EAAK,MAAQP,EAAnCU,EAHUL,OAAAC,EAAA,EAAAD,CAAAvB,EAAA,MAKX6B,EAAKC,IAAUF,GAEfG,EAAU,SAACC,GACfN,EAAOM,EAAEC,OAAOC,QAGZC,EAAaN,EAEf3B,EAAAC,EAAAC,cAAA,KACEE,UAAU,YACVD,KAAI,uBAAA+B,OAAyBP,GAC7BQ,IAAI,sBACJJ,OAAO,UAENJ,GAGL,UAEF,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,6BAGIJ,EAAAC,EAAAC,cAAA,SACAE,UAAU,aACVgC,SAAUP,EACVA,QAASA,EACTQ,YAAarB,IAPjB,YAUYiB,IC/BDK,SAVH,kBACVtC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACqC,EAAD,CACExC,IAAI,wCAENC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,SCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAASC,SAASC,eAAe,QACnCF,EAAOG,WAAWC,OAAS,EAC7BC,kBAAQpD,EAAAC,EAAAC,cAACmD,EAAD,MAASN,GAEjBO,iBAAOtD,EAAAC,EAAAC,cAACmD,EAAD,MAASN,GDuHZ,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0762baf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.91e4e336.svg\";","import React from 'react';\nimport './index.styl';\n\nconst ForkMe = ({\n  url,\n}) => (\n    <a\n      href={url}\n      className=\"github-corner\"\n      aria-label=\"View source on GitHub\"\n    >\n      <svg\n        width=\"80\"\n        height=\"80\"\n        viewBox=\"0 0 250 250\"\n        className=\"svg\"\n        aria-hidden=\"true\"\n      >\n        <path\n          d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"\n          fill=\"#151513\"\n        />\n        <path\n          d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n          fill=\"#fff\"\n          className=\"octo-arm\"\n        />\n        <path\n          d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n          fill=\"#fff\"\n          className=\"octo-body\"\n        />\n      </svg>\n    </a>\n  );\n\nexport default ForkMe;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './index.styl';\n\nconst Header = () => (\n  <header className=\"header\">\n    <img src={logo} className=\"header-logo\" alt=\"logo\" />\n    <h1\n      className=\"header-title\"\n    >\n      Find who he/she is\n    </h1>\n  </header>\n);\n\nexport default Header;\n","import React, { useState } from 'react';\n\nimport img2weibo from 'img2weibo';\n\nimport {\n  useDebounce\n} from 'use-debounce';\n\nimport './index.styl';\n\nconst defaultImg = 'https://wx3.sinaimg.cn/large/632dab64ly1g0m3f02heoj20dc08wq6j.jpg'\n\nconst Form = () => {\n  const [img, setImg] = useState('');\n\n  const [imgVal] = useDebounce(img, 100) || defaultImg;\n\n  const id = img2weibo(imgVal);\n\n  const onInput = (e) => {\n    setImg(e.target.value);\n  };\n\n  const resultUser = id ?\n    (\n      <a\n        className=\"form-link\"\n        href={`https://weibo.com/u/${id}`}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        {id}\n      </a>\n    ) :\n    'unknown';\n\n  return (\n    <div className=\"form\">\n      Paste you weibo image url:\n\n        <input\n        className=\"form-input\"\n        onChange={onInput}\n        onInput={onInput}\n        placeholder={defaultImg}\n      />\n\n      User id: {resultUser}\n    </div>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport ForkMe from './components/fork-me';\nimport Header from './components/header';\nimport Form from './components/form';\nimport './App.styl';\n\nconst App = () =>  (\n  <div className=\"App\">\n    <ForkMe\n      url=\"https://github.com/OpenGG/img2weibo\"\n    />\n    <Header />\n    <Form />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById(\"root\");\nif (rootEl.childNodes.length > 0) {\n  hydrate(<App />, rootEl);\n} else {\n  render(<App />, rootEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}